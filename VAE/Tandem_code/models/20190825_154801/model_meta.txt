model_fn:
def tandem_model(features,labels, backward_fc,   batch_size, clip,
                 fc_filters, tconv_fNums, tconv_dims, tconv_filters,
                 n_filter, n_branch, reg_scale, geoboundary, conv1d_filters, filter_channel_list):
    """
    Customized tandem model which combines 2 model
    """
    backward_out, summary_out,BackCollectionName, BeforeBackCollectionName =\
                          my_model_backward(labels, backward_fc, reg_scale, conv1d_filters,filter_channel_list)
    forward_in, up, preconv, preTconv, merged_summary_op, ForwardCollectionName, train_Forward, Boundary_loss = \
                          my_model_fn_tens(backward_out,features,batch_size, clip,
                                            fc_filters, tconv_fNums, tconv_dims, tconv_filters,
                                            n_filter, n_branch, reg_scale, BackCollectionName, geoboundary)
    return forward_in, up, merged_summary_op, ForwardCollectionName,\
            BackCollectionName, backward_out, train_Forward, Boundary_loss

params:
backward_fc_filters: (100, 500, 1000, 500, 300, 100, 8)
batch_size: 32
best_validation_loss: inf
ckpt_dir: /home/edal/Documents/Ben/idlm_Ben/Tandem/models/20190825_154801
clip: 15
conv1d_filters: (160, 5)
conv_channel_list: (4, 1)
features: Tensor("IteratorGetNext:0", shape=(32, 8), dtype=float32)
forward_fc_filters: (100, 500, 1000, 500, 2000, 1000, 500, 165)
geoboundary: [-1, 1, -1, 1]
global_step: <tf.Variable 'global_step:0' shape=() dtype=int64_ref>
labels: Tensor("IteratorGetNext:1", shape=(32, 300), dtype=float32)
learn_rate: Tensor("ExponentialDecay:0", shape=(), dtype=float32)
n_branch: 2
n_filter: [15]
reg_scale: 5e-08
tconv_Fnums: (4, 4, 4)
tconv_dims: (165, 165, 330)
tconv_filters: (8, 4, 4)
